grammar cl.pleiad.ram.Textram with org.eclipse.xtext.common.Terminals

generate textram "http://www.pleiad.cl/ram/Textram"

import"platform:/resource/ca.mcgill.sel.ram/model/RAM.ecore" 
import"http://www.eclipse.org/emf/2002/Ecore"as ecore

Model:
	aspects+=Aspect*;

Aspect returns Aspect:
	'Aspect'
	name=EString
	'{'
		'structuralView' structuralView=StructuralView
	'}';


Classifier returns Classifier:
	Class | RBoolean | RInt | RChar | RString | REnum | RSet | RSequence | ImplementationClass_Impl | RDouble | RFloat;


Type returns Type:
	Class | RVoid | RBoolean | RInt | RChar | RString | RAny | REnum | RSet | RSequence | ImplementationClass_Impl | RDouble | RFloat;



EString returns ecore::EString:
	STRING | ID;

StructuralView returns StructuralView:
	{StructuralView}
	'StructuralView'
	'{'
		('classes' '{' classes+=Classifier ( "," classes+=Classifier)* '}' )?
		('associations' '{' associations+=Association ( "," associations+=Association)* '}' )?
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
	'}';

Association returns Association:
	'Association'
	name=EString
	'{'
		'ends' '(' ends+=[AssociationEnd|EString] ( "," ends+=[AssociationEnd|EString])* ')' 
	'}';

Operation returns Operation:
	(abstract?='abstract')?
	(static?='static')?
	(partial?='partial')?
	'Operation'
	name=EString
	'{'
		('visibility' visibility=Visibility)?
		'returnType' returnType=[Type|EString]
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Class returns Class:
	{Class}
	(partial?='partial')?
	(abstract?='abstract')?
	'Class'
	name=EString
	'{'
		('superTypes' '(' superTypes+=[Classifier|EString] ( "," superTypes+=[Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

RBoolean returns RBoolean:
	'RBoolean'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RInt returns RInt:
	'RInt'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RChar returns RChar:
	'RChar'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RString returns RString:
	'RString'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

REnum returns REnum:
	'REnum'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		'literals' '{' literals+=REnumLiteral ( "," literals+=REnumLiteral)* '}' 
	'}';

RSet returns RSet:
	'RSet'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		'type' type=[ObjectType|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RSequence returns RSequence:
	'RSequence'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		'type' type=[ObjectType|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

ImplementationClass_Impl returns ImplementationClass:
	'ImplementationClass'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RDouble returns RDouble:
	'RDouble'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RFloat returns RFloat:
	'RFloat'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Visibility returns Visibility:
	'Visibility' /* TODO: implement this rule and an appropriate IValueConverter */;

Parameter returns Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=[Type|EString]
	'}';

AssociationEnd returns AssociationEnd:
	static?='static'
	'AssociationEnd'
	name=EString
	'{'
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('referenceType' referenceType=ReferenceType)?
		('navigable' navigable=EBoolean)?
		'assoc' assoc=[Association|EString]
	'}';

Attribute returns Attribute:
	static?='static'
	'Attribute'
	name=EString
	'{'
		'type' type=[PrimitiveType|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

ReferenceType returns ReferenceType:
	'ReferenceType' /* TODO: implement this rule and an appropriate IValueConverter */;

REnumLiteral returns REnumLiteral:
	{REnumLiteral}
	'REnumLiteral'
	name=EString;

RVoid returns RVoid:
	{RVoid}
	'RVoid'
	name=EString;

RAny returns RAny:
	{RAny}
	'RAny'
	name=EString;


Reference returns Reference:
	static?='static'
	'Reference'
	name=EString
	'{'
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('referenceType' referenceType=ReferenceType)?
		'type' type=[ObjectType|EString]
	'}';
	

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

ElementMap returns ElementMap:
	'ElementMap'
	'{'
		'key' key=[ecore::EObject|EString]
		'value' value=LayoutElement
	'}';

LayoutElement returns LayoutElement:
	'LayoutElement'
	'{'
		'x' x=EFloat
		'y' y=EFloat
	'}';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
