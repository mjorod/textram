grammar cl.pleiad.ram.Textram with org.eclipse.xtext.common.Terminals

generate textram "http://www.pleiad.cl/ram/Textram"

import "platform:/resource/ca.mcgill.sel.ram/model/RAM.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore"as ecore

RamModel:
	aspects+=Aspect*;


Aspect returns Aspect:
	'Aspect'
	name=EString
	'{'
		structuralView=StructuralView
	'}';

//Classifier returns Classifier:
//        Class | RBoolean | RInt | RChar | RString | REnum | RSet | RSequence | ImplementationClass_Impl | RDouble | RFloat;
//
//
//PrimitiveType returns PrimitiveType:
//	RBoolean | RInt | RChar | RString | REnum | RDouble | RFloat;


EString returns ecore::EString:
	STRING | ID;

StructuralView returns StructuralView:
	{StructuralView}
	'StructuralView'
	'{'
		(classes+=Class)?
//		(associations+=Association)?
	'}';


//Operation returns Operation:
//	(abstract?='abstract')?
//	(static?='static')?
//	(partial?='partial')?
//	(visibility=Visibility)?
//	returnType=[Type] //TODO: verificar bien el asunto de los tipos y templates.
//	name=EString 
//	'('
//		(parameters+=Parameter (',' parameters+=Parameter)*)?
//	')' (';')?;
//

//Visibility returns Visibility:
//	"~"
//?;

//Association returns Association:
//        'Association'
//        name=EString
//        '{'
//                'ends' '(' ends+=[AssociationEnd|EString] ( "," ends+=[AssociationEnd|EString])* ')'
//        '}';

//Association returns Association:
//	'associations'
//	name=EString?
//	'{'
//		ends+=[AssociationEnd] ( ","? ends+=[AssociationEnd])* ')'
//	'}';
//
//
//AssociationEnd returns AssociationEnd:
//	static?='static'
//       // #cardinalidad #nombre de clase -> #cardinalidad #nombre de clase
//       lowerBound=EInt '..'? upperBound=EInt  referenceType=ReferenceType '->'
//        
//        	('navigable' navigable=EBoolean)?
//			'assoc' assoc=[Association|EString]
//;

Class returns Class:
	{Class}
//	(partial?='partial')?
//	(abstract?='abstract')?
	'Class'
	name=EString
;
//	'{'
//		(attributes+=Attribute)?
////		(operations+=Operation)?
////		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
//		
//	'}';
//EString returns ecore::EString:
//	STRING | ID;
	
//RBoolean returns RBoolean:
//	'RBoolean'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//RInt returns RInt:
//	'RInt'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//RChar returns RChar:
//	'RChar'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//RString returns RString:
//	'RString'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//REnum returns REnum:
//	'REnum'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//		'literals' '{' literals+=REnumLiteral ( "," literals+=REnumLiteral)* '}' 
//	'}';
//
//RSet returns RSet:
//	'RSet'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		'type' type=[ObjectType|EString]
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//RSequence returns RSequence:
//	'RSequence'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		'type' type=[ObjectType|EString]
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//ImplementationClass_Impl returns ImplementationClass:
//	'ImplementationClass'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//RDouble returns RDouble:
//	'RDouble'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//RFloat returns RFloat:
//	'RFloat'
//	name=EString
//	'{'
//		'instanceClassName' instanceClassName=EString
//		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
//	'}';
//
//EBoolean returns ecore::EBoolean:
//	'true' | 'false';


//TODO: Qualified names?
//Parameter returns Parameter:
//	type=[Type|EString] name=EString
//;

//Attribute returns Attribute:
//	static?='static'
//	//TODO: observar la meta-data de attribute para verificar si soporta EString
//	(type=[PrimitiveType] name=EString (';')?)
//;
//
//EInt returns ecore::EInt:
//	'-'? INT;
//
//ReferenceType returns ReferenceType:
//	'*'? /* TODO: implement this rule and an appropriate IValueConverter */;
//
//REnumLiteral returns REnumLiteral:
//	{REnumLiteral}
//	'REnumLiteral'
//	name=EString;
//
//RVoid returns RVoid:
//	{RVoid}
//	'RVoid'
//	name=EString;
//
//RAny returns RAny:
//	{RAny}
//	'RAny'
//	name=EString;
//
//
//EObject returns ecore::EObject:
//	{ecore::EObject}
//	'EObject'
//;
//
//EFloat returns ecore::EFloat:
//	'-'? INT? '.' INT (('E'|'e') '-'? INT)?
//;