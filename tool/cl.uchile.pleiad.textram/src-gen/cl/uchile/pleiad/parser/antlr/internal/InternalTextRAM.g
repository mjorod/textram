/*
* generated by Xtext
*/
grammar InternalTextRAM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cl.uchile.pleiad.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cl.uchile.pleiad.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cl.uchile.pleiad.services.TextRAMGrammarAccess;

}

@parser::members {

 	private TextRAMGrammarAccess grammarAccess;
 	
    public InternalTextRAMParser(TokenStream input, TextRAMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Aspect";	
   	}
   	
   	@Override
   	protected TextRAMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAspect
entryRuleAspect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAspectRule()); }
	 iv_ruleAspect=ruleAspect 
	 { $current=$iv_ruleAspect.current; } 
	 EOF 
;

// Rule Aspect
ruleAspect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Aspect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAspectAccess().getAspectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAspectAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAspectRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAspectAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAspectAccess().getStructuralViewStructuralViewParserRuleCall_3_0()); 
	    }
		lv_structuralView_3_0=ruleStructuralView		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAspectRule());
	        }
       		set(
       			$current, 
       			"structuralView",
        		lv_structuralView_3_0, 
        		"StructuralView");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAspectAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleStructuralView
entryRuleStructuralView returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructuralViewRule()); }
	 iv_ruleStructuralView=ruleStructuralView 
	 { $current=$iv_ruleStructuralView.current; } 
	 EOF 
;

// Rule StructuralView
ruleStructuralView returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructuralViewAccess().getStructuralViewAction_0(),
            $current);
    }
)	otherlv_1='structure' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructuralViewAccess().getStructureKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructuralViewAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructuralViewAccess().getClassesClassifierParserRuleCall_3_0_0()); 
	    }
		lv_classes_3_0=ruleClassifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructuralViewRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_3_0, 
        		"Classifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStructuralViewAccess().getClassesClassifierParserRuleCall_3_1_0()); 
	    }
		lv_classes_4_0=ruleClassifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructuralViewRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_4_0, 
        		"Classifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructuralViewAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleClassifier
entryRuleClassifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifierRule()); }
	 iv_ruleClassifier=ruleClassifier 
	 { $current=$iv_ruleClassifier.current; } 
	 EOF 
;

// Rule Classifier
ruleClassifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClassifierAccess().getClassParserRuleCall()); 
    }
    this_Class_0=ruleClass
    { 
        $current = $this_Class_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassAccess().getClassAction_0(),
            $current);
    }
)(
(
		lv_partial_1_0=	'partial' 
    {
        newLeafNode(lv_partial_1_0, grammarAccess.getClassAccess().getPartialPartialKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed($current, "partial", true, "partial");
	    }

)
)?(
(
		lv_abstract_2_0=	'abstract' 
    {
        newLeafNode(lv_abstract_2_0, grammarAccess.getClassAccess().getAbstractAbstractKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed($current, "abstract", true, "abstract");
	    }

)
)?	otherlv_3='class' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassAccess().getClassKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getNameEStringParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5());
    }
	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_6());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


