// automatically generated by Xtext
grammar cl.uchile.pleiad.TextRAM with org.eclipse.xtext.common.Terminals

import "http://cs.mcgill.ca/sel/ram/2.1"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Aspect returns Aspect:
	'Aspect'
	name=EString
	'{'
		'structuralView' structuralView=StructuralView
		('messageViews' '{' messageViews+=AbstractMessageView ( "," messageViews+=AbstractMessageView)* '}' )?
		('instantiations' '{' instantiations+=Instantiation ( "," instantiations+=Instantiation)* '}' )?
		('layout' layout=Layout)?
		('stateViews' '{' stateViews+=StateView ( "," stateViews+=StateView)* '}' )?
	'}';


AbstractMessageView returns AbstractMessageView:
	MessageView | MessageViewReference | AspectMessageView;

Classifier returns Classifier:
	Class | RBoolean | RInt | RChar | RString | REnum | RSet | RSequence | ImplementationClass_Impl | RDouble | RFloat;

Type returns Type:
	Class | RVoid | RBoolean | RInt | RChar | RString | RAny | REnum | RSet | RSequence | ImplementationClass_Impl | RDouble | RFloat;

ObjectType returns ObjectType:
	Class | RBoolean | RInt | RChar | RString | REnum | RSet | RSequence | ImplementationClass_Impl | RDouble | RFloat;

PrimitiveType returns PrimitiveType:
	RBoolean | RInt | RChar | RString | REnum | RDouble | RFloat;

InteractionFragment returns InteractionFragment:
	MessageOccurrenceSpecification_Impl | OccurrenceSpecification_Impl | DestructionOccurrenceSpecification | CombinedFragment | OriginalBehaviorExecution | ExecutionStatement;

TypedElement returns TypedElement:
	AssociationEnd | Attribute | Parameter | Reference;

TemporaryProperty returns TemporaryProperty:
	Attribute | Reference;

MessageEnd returns MessageEnd:
	MessageOccurrenceSpecification_Impl | DestructionOccurrenceSpecification | Gate;

StructuralFeature returns StructuralFeature:
	AssociationEnd | Attribute | Reference;


ValueSpecification returns ValueSpecification:
	StructuralFeatureValue | ParameterValue | OpaqueExpression | LiteralString | LiteralInteger | LiteralBoolean;

Substitution returns Substitution:
	Substitution_Impl | TransitionSubstitution;

EString returns ecore::EString:
	STRING | ID;

StructuralView returns StructuralView:
	{StructuralView}
	'StructuralView'
	'{'
		('classes' '{' classes+=Classifier ( "," classes+=Classifier)* '}' )?
		('associations' '{' associations+=Association ( "," associations+=Association)* '}' )?
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
	'}';

Instantiation returns Instantiation:
	'Instantiation'
	'{'
		'type' type=InstantiationType
		'externalAspect' externalAspect=[Aspect|EString]
		('mappings' '{' mappings+=ClassifierMapping ( "," mappings+=ClassifierMapping)* '}' )?
	'}';

Layout returns Layout:
	'Layout'
	'{'
		'containers' '{' containers+=ContainerMap ( "," containers+=ContainerMap)* '}' 
	'}';

StateView returns StateView:
	'StateView'
	name=EString
	'{'
		'specifies' specifies=[Classifier|EString]
		'stateMachines' '{' stateMachines+=StateMachine ( "," stateMachines+=StateMachine)* '}' 
	'}';

Association returns Association:
	'Association'
	name=EString
	'{'
		'ends' '(' ends+=[AssociationEnd|EString] ( "," ends+=[AssociationEnd|EString])* ')' 
	'}';

Operation returns Operation:
	(abstract?='abstract')?
	(static?='static')?
	(partial?='partial')?
	'Operation'
	name=EString
	'{'
		('visibility' visibility=Visibility)?
		'returnType' returnType=[Type|EString]
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Class returns Class:
	{Class}
	(partial?='partial')?
	(abstract?='abstract')?
	'Class'
	name=EString
	'{'
		('superTypes' '(' superTypes+=[Classifier|EString] ( "," superTypes+=[Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

RBoolean returns RBoolean:
	'RBoolean'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RInt returns RInt:
	'RInt'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RChar returns RChar:
	'RChar'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RString returns RString:
	'RString'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

REnum returns REnum:
	'REnum'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		'literals' '{' literals+=REnumLiteral ( "," literals+=REnumLiteral)* '}' 
	'}';

RSet returns RSet:
	'RSet'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		'type' type=[ObjectType|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RSequence returns RSequence:
	'RSequence'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		'type' type=[ObjectType|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

ImplementationClass_Impl returns ImplementationClass:
	'ImplementationClass'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RDouble returns RDouble:
	'RDouble'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

RFloat returns RFloat:
	'RFloat'
	name=EString
	'{'
		'instanceClassName' instanceClassName=EString
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Visibility returns Visibility:
	'Visibility' /* TODO: implement this rule and an appropriate IValueConverter */;

Parameter returns Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=[Type|EString]
	'}';

AssociationEnd returns AssociationEnd:
	static?='static'
	'AssociationEnd'
	name=EString
	'{'
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('referenceType' referenceType=ReferenceType)?
		('navigable' navigable=EBoolean)?
		'assoc' assoc=[Association|EString]
	'}';

Attribute returns Attribute:
	static?='static'
	'Attribute'
	name=EString
	'{'
		'type' type=[PrimitiveType|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

ReferenceType returns ReferenceType:
	'ReferenceType' /* TODO: implement this rule and an appropriate IValueConverter */;

REnumLiteral returns REnumLiteral:
	{REnumLiteral}
	'REnumLiteral'
	name=EString;

RVoid returns RVoid:
	{RVoid}
	'RVoid'
	name=EString;

RAny returns RAny:
	{RAny}
	'RAny'
	name=EString;

AspectMessageView returns AspectMessageView:
	'AspectMessageView'
	name=EString
	'{'
		('affectedBy' '(' affectedBy+=[AspectMessageView|EString] ( "," affectedBy+=[AspectMessageView|EString])* ')' )?
		'pointcut' pointcut=[Operation|EString]
		'advice' advice=Interaction
	'}';

MessageView returns MessageView:
	'MessageView'
	'{'
		('affectedBy' '(' affectedBy+=[AspectMessageView|EString] ( "," affectedBy+=[AspectMessageView|EString])* ')' )?
		'specifies' specifies=[Operation|EString]
		('specification' specification=Interaction)?
	'}';

MessageViewReference returns MessageViewReference:
	'MessageViewReference'
	'{'
		('affectedBy' '(' affectedBy+=[AspectMessageView|EString] ( "," affectedBy+=[AspectMessageView|EString])* ')' )?
		'references' references=[MessageView|EString]
	'}';

Interaction returns Interaction:
	'Interaction'
	'{'
		'fragments' '{' fragments+=InteractionFragment ( "," fragments+=InteractionFragment)* '}' 
		'lifelines' '{' lifelines+=Lifeline ( "," lifelines+=Lifeline)* '}' 
		'messages' '{' messages+=Message ( "," messages+=Message)* '}' 
		('properties' '{' properties+=Reference ( "," properties+=Reference)* '}' )?
		('formalGates' '{' formalGates+=Gate ( "," formalGates+=Gate)* '}' )?
	'}';

Lifeline returns Lifeline:
	'Lifeline'
	'{'
		'represents' represents=[TypedElement|EString]
		'coveredBy' '(' coveredBy+=[InteractionFragment|EString] ( "," coveredBy+=[InteractionFragment|EString])* ')' 
		('localProperties' '{' localProperties+=TemporaryProperty ( "," localProperties+=TemporaryProperty)* '}' )?
	'}';

Message returns Message:
	'Message'
	'{'
		'messageSort' messageSort=MessageSort
		'sendEvent' sendEvent=[MessageEnd|EString]
		'receiveEvent' receiveEvent=[MessageEnd|EString]
		'signature' signature=[Operation|EString]
		('assignTo' assignTo=[StructuralFeature|EString])?
		('arguments' '{' arguments+=ParameterValueMapping ( "," arguments+=ParameterValueMapping)* '}' )?
		('returns' ^returns=ValueSpecification)?
	'}';

Reference returns Reference:
	static?='static'
	'Reference'
	name=EString
	'{'
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('referenceType' referenceType=ReferenceType)?
		'type' type=[ObjectType|EString]
	'}';

Gate returns Gate:
	'Gate'
	name=EString
	'{'
		'message' message=[Message|EString]
	'}';

MessageOccurrenceSpecification_Impl returns MessageOccurrenceSpecification:
	'MessageOccurrenceSpecification'
	'{'
		'covered' '(' covered+=[Lifeline|EString] ( "," covered+=[Lifeline|EString])* ')' 
		'message' message=[Message|EString]
	'}';

OccurrenceSpecification_Impl returns OccurrenceSpecification:
	'OccurrenceSpecification'
	'{'
		'covered' '(' covered+=[Lifeline|EString] ( "," covered+=[Lifeline|EString])* ')' 
	'}';

DestructionOccurrenceSpecification returns DestructionOccurrenceSpecification:
	'DestructionOccurrenceSpecification'
	'{'
		'covered' '(' covered+=[Lifeline|EString] ( "," covered+=[Lifeline|EString])* ')' 
		'message' message=[Message|EString]
	'}';

CombinedFragment returns CombinedFragment:
	'CombinedFragment'
	'{'
		'interactionOperator' interactionOperator=InteractionOperatorKind
		'covered' '(' covered+=[Lifeline|EString] ( "," covered+=[Lifeline|EString])* ')' 
		'operands' '{' operands+=InteractionOperand ( "," operands+=InteractionOperand)* '}' 
	'}';

OriginalBehaviorExecution returns OriginalBehaviorExecution:
	'OriginalBehaviorExecution'
	'{'
		'covered' '(' covered+=[Lifeline|EString] ( "," covered+=[Lifeline|EString])* ')' 
	'}';

ExecutionStatement returns ExecutionStatement:
	'ExecutionStatement'
	'{'
		'covered' '(' covered+=[Lifeline|EString] ( "," covered+=[Lifeline|EString])* ')' 
		'specification' specification=ValueSpecification
	'}';

InteractionOperatorKind returns InteractionOperatorKind:
	'InteractionOperatorKind' /* TODO: implement this rule and an appropriate IValueConverter */;

InteractionOperand returns InteractionOperand:
	'InteractionOperand'
	'{'
		'fragments' '{' fragments+=InteractionFragment ( "," fragments+=InteractionFragment)* '}' 
		('interactionConstraint' interactionConstraint=ValueSpecification)?
	'}';

StructuralFeatureValue returns StructuralFeatureValue:
	'StructuralFeatureValue'
	'{'
		'value' value=[StructuralFeature|EString]
	'}';

ParameterValue returns ParameterValue:
	'ParameterValue'
	'{'
		'parameter' parameter=[Parameter|EString]
	'}';

OpaqueExpression returns OpaqueExpression:
	'OpaqueExpression'
	'{'
		'body' body=EString
		'language' language=EString
	'}';

LiteralString returns LiteralString:
	'LiteralString'
	'{'
		'value' value=EString
	'}';

LiteralInteger returns LiteralInteger:
	'LiteralInteger'
	'{'
		'value' value=EInt
	'}';

LiteralBoolean returns LiteralBoolean:
	value?='value'
	'LiteralBoolean'
	;

MessageSort returns MessageSort:
	'MessageSort' /* TODO: implement this rule and an appropriate IValueConverter */;

ParameterValueMapping returns ParameterValueMapping:
	'ParameterValueMapping'
	'{'
		'parameter' parameter=[Parameter|EString]
		'value' value=ValueSpecification
	'}';

ClassifierMapping returns ClassifierMapping:
	'ClassifierMapping'
	'{'
		'fromElement' fromElement=[Classifier|EString]
		'toElement' toElement=[Classifier|EString]
		('operationMappings' '{' operationMappings+=OperationMapping ( "," operationMappings+=OperationMapping)* '}' )?
		('attributeMappings' '{' attributeMappings+=AttributeMapping ( "," attributeMappings+=AttributeMapping)* '}' )?
	'}';

InstantiationType returns InstantiationType:
	'InstantiationType' /* TODO: implement this rule and an appropriate IValueConverter */;

OperationMapping returns OperationMapping:
	'OperationMapping'
	'{'
		'fromElement' fromElement=[Operation|EString]
		'toElement' toElement=[Operation|EString]
		('parameterMappings' '{' parameterMappings+=ParameterMapping ( "," parameterMappings+=ParameterMapping)* '}' )?
	'}';

AttributeMapping returns AttributeMapping:
	'AttributeMapping'
	'{'
		'fromElement' fromElement=[Attribute|EString]
		'toElement' toElement=[Attribute|EString]
	'}';

ParameterMapping returns ParameterMapping:
	'ParameterMapping'
	'{'
		'fromElement' fromElement=[Parameter|EString]
		'toElement' toElement=[Parameter|EString]
	'}';

ContainerMap returns ContainerMap:
	'ContainerMap'
	'{'
		'key' key=[ecore::EObject|EString]
		'value' '{' value+=ElementMap ( "," value+=ElementMap)* '}' 
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

ElementMap returns ElementMap:
	'ElementMap'
	'{'
		'key' key=[ecore::EObject|EString]
		'value' value=LayoutElement
	'}';

LayoutElement returns LayoutElement:
	'LayoutElement'
	'{'
		'x' x=EFloat
		'y' y=EFloat
	'}';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

StateMachine returns StateMachine:
	'StateMachine'
	'{'
		'start' start=[State|EString]
		('states' '{' states+=State ( "," states+=State)* '}' )?
		('transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' )?
		('substitutions' '{' substitutions+=Substitution ( "," substitutions+=Substitution)* '}' )?
	'}';

State returns State:
	{State}
	'State'
	name=EString
	'{'
		('incomings' '(' incomings+=[Transition|EString] ( "," incomings+=[Transition|EString])* ')' )?
		('outgoings' '(' outgoings+=[Transition|EString] ( "," outgoings+=[Transition|EString])* ')' )?
	'}';

Transition returns Transition:
	'Transition'
	name=EString
	'{'
		'endState' endState=[State|EString]
		'startState' startState=[State|EString]
		('signature' signature=[Operation|EString])?
		('guard' guard=Constraint)?
	'}';

Substitution_Impl returns Substitution:
	{Substitution}
	'Substitution'
	;

Constraint returns Constraint:
	'Constraint'
	'{'
		'Specification' Specification=ValueSpecification
	'}';

TransitionSubstitution returns TransitionSubstitution:
	'TransitionSubstitution'
	'{'
		'from' from=[Transition|EString]
		'to' '(' to+=[Transition|EString] ( "," to+=[Transition|EString])* ')' 
	'}';
