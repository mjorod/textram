grammar cl.uchile.pleiad.TextRAM with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://cs.mcgill.ca/sel/ram/2.1"

generate textRam "http://cl.pleiad.textram/1.0" as textRam

Aspect returns Aspect:
'aspect'
name=EString
'{'
	structuralView=TStructuralView
'}';

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

AbstractStructuralView returns StructuralView:
	TStructuralView
; 


TStructuralView returns textRam::TStructuralView:
	{textRam::TStructuralView}
	'structure'
	'{'
		( classes+=Classifier (classes+=Classifier)* )?
		('associations' '{' tAssociations+=TAssociation ( "," tAssociations+=TAssociation)* '}' )?
	'}';
        
Classifier returns Classifier:
    Class;

Type returns Type:
	Class | RVoid | RBoolean | RInt | RChar | RString | RAny |  RDouble | RFloat;
	
PrimitiveType returns PrimitiveType:
    RBoolean | RInt | RChar | RString | RDouble | RFloat;// | REnum;

TypedElement returns TypedElement:
    Attribute;

TemporaryProperty returns TemporaryProperty:
    Attribute;
        
StructuralFeature returns StructuralFeature:
	Attribute;

RString:
	{RString}
;

RFloat:
	{RFloat}
;

RDouble:
	{RDouble}
;

RAny:
	{RAny}
;

RChar:
	{RChar}
;

RInt:
	{RInt}
;

RBoolean:
	{RBoolean}
;

RVoid:
	{RVoid}
;
  

Class:
    {Class}
    (abstract?='abstract')?
    'class'
    (partial?='|')?
    name=EString
    '{'
        ( 'attributes' '{' attributes+=Attribute ( ";"? attributes+=Attribute)* '}' )?
        ( 'operations' '{' operations+=Operation ( ";"? operations+=Operation)* '}' )?
    '}';

Attribute returns Attribute:
	{Attribute}
    (static?='static')?
    type=[PrimitiveType|EString]
    name=EString;

Operation returns Operation:
	{Operation}
    (abstract?='abstract')?
    (static?='static')?
    visibility=Visibility
    returnType=[Type|EString]
    (partial?='|')?
    name=EString 
    '('
    	( parameters+=Parameter ( "," parameters+=Parameter)* )?
    ')';

Parameter returns Parameter:
    {Parameter}
    type=[Type|EString]
	name=EString;  

enum Visibility returns Visibility:
	public = '+' | private = '-' | protected = '#' | package = "~" 
;

TAssociation returns textRam::TAssociation:
	{textRam::TAssociation}
    fromEnd=TAssociationEnd "->" toEnd=TAssociationEnd  '{' name=EString  '}'  
;

TAssociationEnd returns textRam::TAssociationEnd:
	{textRam::TAssociationEnd}
    lowerBound=EInt
    '..'
    upperBound=EInt
    classReference=[Class|EString]
;