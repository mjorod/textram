grammar cl.uchile.pleiad.TextRAM with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://cs.mcgill.ca/sel/ram/2.1"

generate textRam "http://cl.pleiad.textram/1.0" as textRam

Aspect returns Aspect:
'aspect'
name=EString
'{'
	structuralView=TStructuralView
	('instantiations' '{' instantiations+=Instantiation ( ";"? instantiations+=Instantiation)* '}' )?
'}';

EString returns ecore::EString:
    STRING | ID;

EInt returns ecore::EInt:
    '-'? INT;

AbstractStructuralView returns StructuralView:
    TStructuralView
; 

TStructuralView returns textRam::TStructuralView:
    {textRam::TStructuralView}
    'structure'
    '{'
        ( classes+=Classifier (classes+=Classifier)* )?
        ('associations' '{' tAssociations+=TAssociation ( "," tAssociations+=TAssociation)* '}' )?
    '}';
        
Classifier returns Classifier:
    TClass;

Type returns Type:
    TClass | RVoid | RBoolean | RInt | RChar | RString | RAny |  RDouble | RFloat;
        
PrimitiveType returns PrimitiveType:
    RBoolean | RInt | RChar | RString | RDouble | RFloat;// | REnum;


RString:
    {RString}
;

RFloat:
    {RFloat}
;

RDouble:
    {RDouble}
;

RAny:
    {RAny}
;

RChar:
    {RChar}
;

RInt:
    {RInt}
;

RBoolean:
    {RBoolean}
;

RVoid:
    {RVoid}
;

AbstractClass returns Class:
	TClass
;

TClassMember returns textRam::TClassMember:
	TAttribute | TOperation
;
  
TClass returns textRam::TClass:
    {textRam::TClass}
    (abstract?='abstract')?
    'class'
    (partial?='|')?
    name=EString (':' superTypes+=[Classifier|EString])?
    '{'
    	( members+=TClassMember  ( ";"? members+= TClassMember)*  )?
    '}';

TAttribute returns textRam::TAttribute:
    {textRam::TAttribute}
    (static?='static')?
    type=[PrimitiveType|EString]
    name=EString;

TOperation returns textRam::TOperation:
    {textRam::TOperation}
    (abstract?='abstract')?
    (static?='static')?
    visibility=Visibility
    returnType=[Type|EString]
    (partial?='|')?
    name=EString 
    '('
    	( parameters+=Parameter ( "," parameters+=Parameter)* )?
    ')';

Parameter returns Parameter:
    {Parameter}
    type=[Type|EString]
        name=EString;  

enum Visibility returns Visibility:
	public = '+' | private = '-' | protected = '#' | package = "~" 
;

TAssociation returns textRam::TAssociation:
    {textRam::TAssociation}
    fromEnd=TAssociationEnd "->" toEnd=TAssociationEnd  '{' name=EString  '}'  
;

TAssociationEnd returns textRam::TAssociationEnd:
	{textRam::TAssociationEnd}
    (lowerBound=ElementBound
    '..')?
    (upperBound=ElementBound)?
    classReference=[Class|EString]
;

ElementBound returns ecore::EInt:
	'*' | INT;
	
Instantiation returns Instantiation:
    (type=InstantiationType)?
    externalAspect=[Aspect|EString]
    ('{' mappings+=TClassifierMapping ( ";"? mappings+=TClassifierMapping)* '}' )
;
    
enum InstantiationType returns InstantiationType:
    Depends = 'dependsOn' | Extends = 'extends';
    

AbstractClassifierMapping returns ClassifierMapping:
    TClassifierMapping
; 

TClassifierMapping returns textRam::TClassifierMapping:
    ('|')?
    fromElement=[Classifier|EString] ('<' ('|')? fromMember+=[textRam::TClassMember] ("," ('|')? fromMember+=[textRam::TClassMember])* '>')?
    '->'
    toElement=[Classifier|EString] ('<' ('|')? toMember+=[textRam::TClassMember] ("," ('|')? toMember+=[textRam::TClassMember])*  '>')?
;