grammar cl.uchile.pleiad.TextRAM with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://cs.mcgill.ca/sel/ram/2.1"

generate textRam "http://cl.pleiad.textram/1.0" as textRam

Aspect :
	TAspect
;

TAspect returns textRam::TAspect:
'aspect' name=EString (headerInstantiations+=TInstantiationHeader (","? headerInstantiations+=TInstantiationHeader)*)?
'{'
	structuralView=TStructuralView
	('instantiations' '{' instantiations+=Instantiation ( ";"? instantiations+=Instantiation)* '}' )?
	('messages' '{' messageViews+=TAbstractMessageView '}' )?
'}';

terminal TEMPLATE: (ID'<' ID '>')*;
EString returns ecore::EString:
    STRING | ID | TEMPLATE  | '<<' | '>>';

EInt returns ecore::EInt:
    '-'? INT;
    
AbstractStructuralView returns StructuralView:
    TStructuralView
;

TAbstractMessageView returns AbstractMessageView:
	{textRam::TAbstractMessageView}		
	'objects' '{'
		lifelines+=TLifeline (';'? lifelines+=TLifeline)*
	'}'

	messages+=TAbstractMessages (messages+=TAbstractMessages)*
;

TAbstractMessages returns textRam::TAbstractMessages:
	TMessageView | TAspectMessageView      
;

TStructuralView returns textRam::TStructuralView:
    {textRam::TStructuralView}
    'structure'
    '{'
        ( classes+=Classifier (classes+=Classifier)* )?
        ('associations' '{' tAssociations+=TAssociation ( ";"? tAssociations+=TAssociation)* '}' )?
    '}';
        
Classifier returns Classifier:
    TClass;

Type returns Type:
    TClass | RVoid | RBoolean | RInt | RChar | RString | RAny |  RDouble | RFloat | RSet;

ObjectType returns ObjectType:
    TClass | RBoolean | RInt | RChar | RString  | RDouble | RFloat | RSet;
        
PrimitiveType returns PrimitiveType:
    RBoolean | RInt | RChar | RString | RDouble | RFloat;// | REnum;

RString: {RString}; RFloat: {RFloat}; RDouble: {RDouble}; RAny: {RAny}; RChar: {RChar}; RInt: {RInt}; RBoolean: {RBoolean}; RVoid: {RVoid}; RSet: {RSet};

AbstractClass returns Class:
	TClass
;

TClassMember returns textRam::TClassMember:
	TAttribute | TOperation
;
  
TClass returns textRam::TClass:
    {textRam::TClass}
    (abstract?='abstract')?
    'class'
    (partial?='|')?
    name=EString (':' superTypes+=[Classifier|EString])?
    '{'
    	( members+=TClassMember  ( ";"? members+= TClassMember)*  )?
    '}';

TAttribute returns textRam::TAttribute:
    (static?='static')?
    type=[PrimitiveType|EString]
    (partial?='|')? name=EString;

TOperation returns textRam::TOperation:
    {textRam::TOperation}
    (abstract?='abstract')?
    (static?='static')?
    visibility=Visibility
    returnType=[Type|EString]
    (partial?='|')?
    name=EString 
    '('
    	( parameters+=Parameter ( "," parameters+=Parameter)* )?
    ')';
    
Parameter returns Parameter:
    {Parameter}
    type=[Type|EString]
    name=EString;  

TAssociation returns textRam::TAssociation:
    {textRam::TAssociation}
    fromEnd=TAssociationEnd (referenceType=ReferenceType)?"->" toEnd=TAssociationEnd  '{' name=EString  '}'  
;

TAssociationEnd returns textRam::TAssociationEnd:
	{textRam::TAssociationEnd}
    (lowerBound=ElementBound
    '..')?
    (upperBound=ElementBound)?
    classReference=[Class|EString]
;

ElementBound returns ecore::EInt:
	'*' | INT;

TInstantiationHeader returns textRam::TInstantiationHeader:
	type = InstantiationType
	externalAspects+=[Aspect|EString] ("," externalAspects+=[Aspect|EString])*
;
	
Instantiation returns Instantiation:
    externalAspect=[Aspect|EString]
    ('{' mappings+=TClassifierMapping ( ";"? mappings+=TClassifierMapping)* '}')?
;

AbstractClassifierMapping returns ClassifierMapping:
    TClassifierMapping
; 

TClassifierMapping returns textRam::TClassifierMapping:
    fromElement=[Classifier|EString] ('<' fromMembers+=[textRam::TClassMember|EString] ("," fromMembers+=[textRam::TClassMember|EString])* '>')?
    '->'
    toElement=[Classifier|EString] ('<' toMembers+=[textRam::TClassMember|EString] ("," toMembers+=[textRam::TClassMember|EString])* '>')?
;

TMessageView returns textRam::TMessageView:
	{textRam::TMessageView}
	'messageView' class=[textRam::TClass|EString] '.' specifies=[textRam::TOperation|EString]  
	'('
    	( parameters+=Parameter ( "," parameters+=Parameter)* )?
    ')'
    ('affectedBy' affectedBy+=[textRam::TAspectMessageView|EString] (',' affectedBy+=[textRam::TAspectMessageView|EString]* )? )?
	('{'
		interactionMessages+=TInteraction (';'? interactionMessages+=TInteraction)*
	'}')?
;

TAspectMessageView returns textRam::TAspectMessageView:
	'aspectMessageView' 
		name=EString '{'
		'pointcut' pointcut=[textRam::TOperation|EString]
		'advice' '{'
			interactionMessages+=TInteraction (';'? interactionMessages+=TInteraction)*
		'}'
	'}'
;

TLifeline returns textRam::TLifeline:
	(static?='static')?
	(reference?='ref')?
	name=EString ':' (represents=[textRam::TTypedElement|EString])?
	('{' 
		localProperties+=TTemporaryProperty (";"? localProperties+=TTemporaryProperty)*
	'}')?
;

TTemporaryProperty returns textRam::TTemporaryProperty:
	TReference | TLocalAttribute
;

TReference returns textRam::TReference:
	name=EString ':' reference=[textRam::TClass|EString]
;

TLocalAttribute returns textRam::TLocalAttribute:
	type=[PrimitiveType|EString]
	name=EString
;

TInteraction returns textRam::TInteraction:
	TInteractionMessage | TCombinedFragment
;

TInteractionMessage returns textRam::TInteractionMessage:
	leftLifeline=[textRam::TLifeline|EString] '=>' (originalExecution?='*')?  (create?='new')? rightLifeline=[textRam::TLifeline|EString]  ('{'  message=TAbstractMessage '}')?
;

TCombinedFragment returns textRam::TCombinedFragment:
	interactionOperator=InteractionOperatorKind '[' interactionConstraint=EString ']' '{'
		containers+=TInteraction ( containers+=TInteraction )*  
	'}'
	('else' '{'
		elseContainers+=TInteraction ( elseContainers+=TInteraction )*
	'}')?
;

TAbstractMessage returns textRam::TAbstractMessage:
	TMessageWithSignature | TReturnMessage
;

TMessageWithSignature returns textRam::TMessageWithSignature:
	TMessage | TOperationMessage 
;

TReturnMessage returns textRam::TReturnMessage:
	assignTo=[textRam::TMessageAssignableFeature|EString]
;

TMessage returns textRam::TMessage:
	(assignTo=[textRam::TMessageAssignableFeature|EString] ':=')?
	signature=[textRam::TOperation|EString] '(' ( arguments+=[Parameter|EString] (',' arguments+=[Parameter|EString] )?  )? ')'
;

TOperationMessage returns textRam::TOperationMessage:
	signature=[textRam::TOperation|EString]
	'('
    	( parameters+=Parameter ( "," parameters+=Parameter)* )?
    ')'
    ':'
    returnType=[Type|EString];

//TODO: It should be StructuralFeature | Parameter
TTypedElement returns textRam::TTypedElement:
	TAssociation | TAttribute | TClass
;

//AssignableFeature
TMessageAssignableFeature returns textRam::TMessageAssignableFeature:
	TAssociation | TTemporaryProperty 
;

LiteralString: {LiteralString};

enum Visibility returns Visibility:
	public = '+' | private = '-' | protected = '#' | package = "~" 
;

enum InstantiationType returns InstantiationType:
    Depends = 'dependsOn' | Extends = 'extends';

enum MessageSort returns MessageSort:
    synchCall = 'synchCall' | createMessage = 'createMessage' | deleteMessage = 'deleteMessage' | reply = 'reply'
;

enum ReferenceType returns ReferenceType:
	Composition = '*' | Aggregation='o'
;

enum InteractionOperatorKind returns InteractionOperatorKind:
	alt = 'alt' | opt = 'opt' | loop = 'loop'
;