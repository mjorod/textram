/*
 * generated by Xtext
 */
package cl.uchile.pleiad.generator

import ca.mcgill.cs.sel.ram.Aspect
import cl.uchile.pleiad.converter.ModelConverterProxy
import cl.uchile.pleiad.util.DirectedGraph
import cl.uchile.pleiad.util.TextRAMPersistence
import cl.uchile.pleiad.util.TopologicalSort
import java.util.Calendar
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import cl.uchile.pleiad.textRam.TAspect

//import org.eclipse.xtext.parsetree.reconstr.Serializer


/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class TextRAMGenerator implements IGenerator {
    
        
    override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        
        val d = new DirectedGraph<TAspect>()
        
        for (aspect : resource.allContents.toIterable.filter(TAspect)){
//    		d.addNode(aspect)
//    		
//    		val textRamAspect = aspect as TAspect
//    		
//    		textRamAspect.headerInstantiations.forEach[ instantiation |
//    			instantiation.externalAspects.forEach[  externalAspect |
//    				d.addNode(externalAspect)
//    				d.addEdge(externalAspect, aspect)	
//    			]
//    		]
			this.addNode(d, aspect as TAspect)
	    }
	    
	    ModelConverterProxy::instance.reset
	    
	    TopologicalSort::sort(d).forEach[ aspect | 
			val relativePath = '''aspects/«aspect.name».ram'''
            val path = '''../aspects/«aspect.name».ram'''
                
            val ramAspect = ModelConverterProxy::instance.convertTextRAMModelToRAMModel(aspect)
            
            val content = TextRAMPersistence::instance.serializeModel(ramAspect, path)
            
            fsa.generateFile(relativePath, content)
	    ]
  	}
  	
  	def void addNode(DirectedGraph<TAspect> d, TAspect aspect) {
  		d.addNode(aspect)
  		
  		val textRamAspect = aspect as TAspect
    		
    		textRamAspect.headerInstantiations.forEach[ instantiation |
    			instantiation.externalAspects.forEach[  externalAspect |
    				d.addNode(externalAspect)
    				d.addEdge(externalAspect, aspect)
    				
    				this.addNode(d, externalAspect)	
    			]
    		]
  		
  	}
}
         