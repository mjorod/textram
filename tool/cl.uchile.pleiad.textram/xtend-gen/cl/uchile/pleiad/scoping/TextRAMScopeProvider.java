/**
 * generated by Xtext
 */
package cl.uchile.pleiad.scoping;

import ca.mcgill.cs.sel.ram.Aspect;
import ca.mcgill.cs.sel.ram.Classifier;
import ca.mcgill.cs.sel.ram.Instantiation;
import ca.mcgill.cs.sel.ram.PrimitiveType;
import ca.mcgill.cs.sel.ram.StructuralView;
import ca.mcgill.cs.sel.ram.Type;
import cl.uchile.pleiad.scoping.ModelScopeProvider;
import cl.uchile.pleiad.textRam.TAbstractMessageView;
import cl.uchile.pleiad.textRam.TAbstractMessages;
import cl.uchile.pleiad.textRam.TAspect;
import cl.uchile.pleiad.textRam.TAspectMessageView;
import cl.uchile.pleiad.textRam.TClass;
import cl.uchile.pleiad.textRam.TClassMember;
import cl.uchile.pleiad.textRam.TClassifierMapping;
import cl.uchile.pleiad.textRam.TInteractionMessage;
import cl.uchile.pleiad.textRam.TMessageAssignableFeature;
import cl.uchile.pleiad.textRam.TOperation;
import cl.uchile.pleiad.textRam.TParameter;
import cl.uchile.pleiad.textRam.TStructuralView;
import cl.uchile.pleiad.textRam.TTypedElement;
import cl.uchile.pleiad.textRam.TValueSpecification;
import com.google.common.collect.Iterables;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class TextRAMScopeProvider extends AbstractDeclarativeScopeProvider {
  @Extension
  private ModelScopeProvider scopeProvider = new ModelScopeProvider();
  
  public IScope scope_Instantiation_externalAspect(final TAspect aspect, final EReference reference) {
    Iterable<Aspect> _externalAspectsFromHeader = this.scopeProvider.getExternalAspectsFromHeader(aspect);
    return Scopes.scopeFor(_externalAspectsFromHeader);
  }
  
  public IScope scope_TOperation_returnType(final TStructuralView structuralView, final EReference reference) {
    EList<Type> _typesFor = this.scopeProvider.getTypesFor(structuralView);
    return Scopes.scopeFor(_typesFor);
  }
  
  public IScope scope_TAttribute_type(final TStructuralView structuralView, final EReference reference) {
    List<PrimitiveType> _primitiveTypes = this.scopeProvider.getPrimitiveTypes(structuralView);
    return Scopes.scopeFor(_primitiveTypes);
  }
  
  public IScope scope_ClassifierMapping_fromElement(final Instantiation instantiation, final EReference reference) {
    IScope _xblockexpression = null;
    {
      final List<Classifier> classes = this.scopeProvider.getClasses(instantiation);
      _xblockexpression = Scopes.scopeFor(classes);
    }
    return _xblockexpression;
  }
  
  public IScope scope_ClassifierMapping_toElement(final Aspect aspect, final EReference reference) {
    StructuralView _structuralView = aspect.getStructuralView();
    EList<Classifier> _classes = ((TStructuralView) _structuralView).getClasses();
    Iterable<TClass> _filter = Iterables.<TClass>filter(_classes, TClass.class);
    return Scopes.scopeFor(_filter);
  }
  
  public IScope scope_TClassifierMapping_fromMembers(final TClassifierMapping classifierMapping, final EReference reference) {
    List<TClassMember> _membersFrom = this.scopeProvider.getMembersFrom(classifierMapping);
    return Scopes.scopeFor(_membersFrom);
  }
  
  public IScope scope_TClassifierMapping_toMembers(final TClassifierMapping classifierMapping, final EReference reference) {
    IScope _xblockexpression = null;
    {
      Classifier _toElement = classifierMapping.getToElement();
      final TClass toElement = ((TClass) _toElement);
      EList<TClassMember> _members = toElement.getMembers();
      _xblockexpression = Scopes.scopeFor(_members);
    }
    return _xblockexpression;
  }
  
  public IScope scope_TAbstractMessages_class(final Aspect aspect, final EReference reference) {
    IScope _xblockexpression = null;
    {
      final TAspect tAspect = ((TAspect) aspect);
      List<TClass> _extendedClasses = this.scopeProvider.getExtendedClasses(tAspect);
      _xblockexpression = Scopes.scopeFor(_extendedClasses);
    }
    return _xblockexpression;
  }
  
  public IScope scope_TAbstractMessages_specifies(final Aspect aspect, final EReference reference) {
    IScope _xblockexpression = null;
    {
      final TAspect tAspect = ((TAspect) aspect);
      List<TOperation> _extendedOperations = this.scopeProvider.getExtendedOperations(tAspect);
      _xblockexpression = Scopes.scopeFor(_extendedOperations);
    }
    return _xblockexpression;
  }
  
  public IScope scope_TLifeline_represents(final Aspect aspect, final EReference reference) {
    List<TTypedElement> _tTypedElements = this.scopeProvider.getTTypedElements(((TAspect) aspect));
    return Scopes.scopeFor(_tTypedElements);
  }
  
  public IScope scope_TMessage_assignTo(final TInteractionMessage textRamInteractionMessage, final EReference reference) {
    List<TMessageAssignableFeature> _assignableFeatures = this.scopeProvider.getAssignableFeatures(textRamInteractionMessage);
    return Scopes.scopeFor(_assignableFeatures);
  }
  
  public IScope scope_TMessage_signature(final TInteractionMessage interaction, final EReference reference) {
    List<TOperation> _extendedOperationsFromRightLifeline = this.scopeProvider.getExtendedOperationsFromRightLifeline(interaction);
    return Scopes.scopeFor(_extendedOperationsFromRightLifeline);
  }
  
  public IScope scope_TReturnInteraction_return(final TAbstractMessages textRamMessageView, final EReference reference) {
    List<TValueSpecification> _tValueSpecificationUsedByMessageView = this.scopeProvider.getTValueSpecificationUsedByMessageView(textRamMessageView);
    return Scopes.scopeFor(_tValueSpecificationUsedByMessageView);
  }
  
  public IScope scope_TMessage_arguments(final TInteractionMessage interaction, final EReference reference) {
    List<TValueSpecification> _tValueSpecificationList = this.scopeProvider.getTValueSpecificationList(interaction);
    return Scopes.scopeFor(_tValueSpecificationList);
  }
  
  public IScope scope_TMessageView_affectedBy(final TAbstractMessageView abstractMessageView, final EReference reference) {
    List<TAspectMessageView> _aspectMessageViews = this.scopeProvider.getAspectMessageViews(abstractMessageView);
    return Scopes.scopeFor(_aspectMessageViews);
  }
  
  public IScope scope_TAbstractMessages_arguments(final TAbstractMessages messageView, final EReference reference) {
    Iterable<TParameter> _argumentsForAspectMessageViewOperation = this.scopeProvider.getArgumentsForAspectMessageViewOperation(messageView);
    return Scopes.scopeFor(_argumentsForAspectMessageViewOperation);
  }
}
