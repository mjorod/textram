aspect SMNetworkArbiter extends	SMNetwork, dependsOn Map, Named, Singleton {
	  
	structure { 
		class Arbiter {
			~ Result notAllowed()
			+ Arbiter getArbiter()
			+ boolean getValue()
			
		}
		
		class Command {
			+ Result execute()
			+ String getName()
			+ boolean getValue()
		}
		
		class Result {
		}
		
		class NotAllowed : Result {
			+ NotAllowed create()
		}
		
		class StringType {}
		class BooleanType {}
	}  
	
	/* 
	 * Incomplete in that the map is not filled in. 
	 * It should be done at instantiation time or configuration time
	 * 
	 */
	instantiations {
		Map {
			|Key     -> StringType
			|Value   -> BooleanType
			|DataMap -> Arbiter
		}
		Named {
			|Named   -> Command
		}
		Singleton {
			|Singleton <getInstance> -> Arbiter <getArbiter>
		}
		
	}
 	
	messages {
		lifelines {
			ref com:Command { String name; boolean allowed; ret:NotAllowed }
			ref arb:Arbiter
			ref na:NotAllowed
		} 
		
		/**
		 * Independent of actual protocols being used. 
		 * Only assumes that the commands are named differently according 
		 * to the protocol being used, 
		 * such that they can be configured unambiguously.
		 * 
		 */
		aspectMessageView arbitExce {
			pointcut execute()
			advice {
				com => com { name := getName() }
				com => arb { allowed := getValue() } 
				
				alt [ "allowed" ] {
					com =>*
				}
				else {
					com => new na { ret:=create() }   
					return ret
				}
			} 
		} 
		
		messageView Command.execute() affectedBy arbitExce
	}
}