aspect Betting extends Game { 
	structure {
        class Machine {
          int credits
          + void withDrawCredits(int amount)
          + void depositCredits (int amount)
          + void initialize()
          + void play()
          + Reel getReelAtPosition(int index)
          + void addCredits(int credit)
        }   
        
        class Reel {
        	+ Symbol getCurrentSymbol()
        }
          
        class Symbol {}
   
        class PayTable {
          + PayTable create(String fileName)
          + int payout(Symbol first, Symbol second, Symbol third, Symbol fourth, Symbol fifth)
        }  
   
        associations {
          Machine -> 0 .. 1 PayTable { myPayTable } 
        }   
      }        
           
      messages {
      	lifelines {
      		ref target:Machine { String default = "default"; int credits; r1:Reel; int index; s1:Symbol; s2:Symbol; s3:Symbol; s4:Symbol; s5:Symbol; int win }    
      		ref myPayTable:PayTable 
      		ref r:Reel
      	}
      	 
      	aspectMessageView loadPayTable {
      		pointcut Machine.initialize()
      		advice {
      			target =>*  
      			target => new myPayTable { myPayTable := create(fileName) } 
      		}       
      	}       
      	 
      	aspectMessageView playWithMoney {
      		pointcut Machine.play() 
      		advice {
      			opt ["credits >= 5"] {
      				target => target     { withDrawCredits(credits) }
      				target =>*
      				target => target     { r1 := getReelAtPosition(index) }
      				target => r          { s1 := getCurrentSymbol() }
      				target => myPayTable { win := payout(s1, s2, s3, s4, s5) }
      				target => target     { addCredits(win) } 
      			}  
      		}
      		
      	}  
      	
      	messageView Machine.initialize() affectedBy loadPayTable
      	messageView Machine.play() affectedBy playWithMoney  
      	  	
		     	
      	
      }
}